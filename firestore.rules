rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if a user is the owner of a link
    function isLinkOwner(linkId) {
      // Use `exists` for safer checks against documents that might not exist.
      return exists(/databases/$(database)/documents/links/$(linkId)) &&
             get(/databases/$(database)/documents/links/$(linkId)).data.userId == request.auth.uid;
    }

    // Allow public read for redirection, but secure creation, update, and deletion.
    match /links/{linkId} {
      allow read: if true;
      // Only authenticated users can create links.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only the owner of the link can update or delete it.
      allow update, delete: if request.auth != null && isLinkOwner(linkId);
    }

    // Clicks can be created by anyone to log a visit.
    // Reading click data is restricted.
    match /clicks/{clickId} {
      allow create: if true;
      // Only the owner of the associated link can read click data.
      allow read: if request.auth != null && isLinkOwner(resource.data.linkId);
      // Clicks are immutable.
      allow update, delete: if false;
    }

    // User data can only be read and managed by the user themselves.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if false;
    }
  }
}